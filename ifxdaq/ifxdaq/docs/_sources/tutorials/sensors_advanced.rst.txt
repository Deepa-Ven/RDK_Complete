Sensors (advanced) - :mod:`ifxdaq.sensor`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The different sensors can be found in the :mod:`ifxdaq.sensor` package. Each sensor is implemented in a standalone
module:

.. list-table:: Available sensors
    :header-rows: 1

    * - Package
      - ClassName
      - Sub-sensors
    * - :mod:`ifxdaq.sensor.radar_ifx`
      - :class:`~ifxdaq.sensor.radar_ifx.RadarIfxBGT60TR13C`,
        :class:`~ifxdaq.sensor.radar_ifx.RadarIfxBGT60UTR13D`,
        :class:`~ifxdaq.sensor.radar_ifx.RadarIfxBGT60ATR24C`,
        (Base class: :class:`~ifxdaq.sensor.radar_ifx.RadarIfxAvian`)
      - ``radar``, ``temperature``
    * - :mod:`ifxdaq.sensor.camera_irs`
      - :class:`~ifxdaq.sensor.camera_irs.CamIntelRealSense`
      - ``rgb``, ``depth``, ``ir1``, ``ir2``
    * - :mod:`ifxdaq.sensor.camera_ocv`
      - :class:`~ifxdaq.sensor.camera_ocv.CamOpenCV`
      - ``rgb``


.. note::
    We will use for our examples always the Infineon radar sensor :class:`~ifxdaq.sensor.radar_ifx.RadarIfxAvian` - if
    you want to try the examples with another sensor, you can simply exchange them.

    All examples are completely self-contained. You can copy & insert them directly into your code file / Python
    terminal / Jupyter notebook and start experimenting.


Discover connected devices
~~~~~~~~~~~~~~~~~~~~~~~~~~

Every sensor supports the ``discover`` function to find attached devices. The function returns a list of unique device
ids to access & re-identify devices.

.. code:: python

    from ifxdaq.sensor.radar_ifx import RadarIfxAvian

    RadarIfxAvian.discover()


Open & close the sensor via context manager
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First, we show how to open and close a sensor with a `context manager
<https://docs.python.org/3/reference/compound_stmts.html#the-with-statement>`_. We recommend to use always a context
manager to handle sensors, because it guarantees that the sensors are correctly disconnected and the resources are
freed. Opening a sensor requires a configuration file, because sensor parameters must be set. If you want to access
a specific sensor, you can use the optional ``device_id`` argument, otherwise a random sensor will be selected.

.. code:: python

    from ifxdaq.sensor.radar_ifx import RadarIfxAvian

    config_file = RadarIfxAvian.create_default_config_file()
    with RadarIfxAvian(config_file) as radar:
        pass

You can access inside the context manager sensor attributes like ``meta_data``, ``device_id``, ``config_file`` and
``frame_format``.


Acquire data
~~~~~~~~~~~~

After opening & closing a device, we will now acquire data with a device. Data is returned as  a ``Dict`` that contains
a :class:`~ifxdaq.sensor.abc.Frame` for all available sub-sensors on a device.

.. code:: python

    import time

    from ifxdaq.sensor.radar_ifx import RadarIfxAvian

    config_file = RadarIfxAvian.create_default_config_file()
    t0 = time.time()
    with RadarIfxAvian(config_file) as radar:
        for frame in radar:
            print(frame)
            if time.time() - t0 > 10:  # Acquire data for 10 seconds
                break

If you don't want to use the iterator functionality, you can access the latest frame also with the ``data`` attribute.


Acquire data in a different process
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sometimes you want to outsource data acquisition into another process to be able to use heavy data processing without
blocking the data acquisition. This can easily be achieved by routing the data from the
:class:`~ifxdaq.process.SensorProcess` with a :class:`~ifxdaq.multiproc.route.RouterWorker`.

.. code:: python

    import time

    from ifxdaq.process import SensorProcess
    from ifxdaq.sensor.radar_ifx import RadarIfxAvian
    from ifxdaq.multiproc.route import RouterWorker

    config_file = RadarIfxAvian.create_default_config_file()
    with SensorProcess(sensor=RadarIfxAvian, config_file=config_file, workers=[RouterWorker()], timeout=10) as process:
        t0 = time.time()
        for frame in process.router:
            print(frame)
            if time.time() - t0 > 10:  # Acquire data for 10 seconds
                break

You can access a ``Dict`` of :class:`~ifxdaq.sensor.abc.Frame` as you are used to it from within the same process.
